require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Tournament::TeamsController, type: :controller do

  let(:tournament) { FactoryGirl.create(:tournament_basis) }

  # This should return the minimal set of attributes required to create a valid
  # Tournament::Team. As you add validations to Tournament::Team, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for(:tournament_team, tournament: tournament)
  }

  let(:invalid_attributes) {
    FactoryGirl.attributes_for(:tournament_team_invalid, tournament: tournament)
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Tournament::TeamsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all tournament_teams as @tournament_teams" do
      team = Tournament::Team.create! valid_attributes
      get :index, params: {tournament_id: tournament.to_param}, session: valid_session
      expect(assigns(:tournament_teams)).to eq([team])
    end
  end

  describe "GET #show" do
    it "assigns the requested tournament_team as @tournament_team" do
      team = Tournament::Team.create! valid_attributes
      get :show, params: {tournament_id: tournament.to_param, team_id: team.team.to_param}, session: valid_session
      expect(assigns(:tournament_team)).to eq(team)
    end

    it "renders 404 if tournament_team does not exist" do
      get :show, params: {tournament_id: tournament.to_param, team_id: 0}, session: valid_session
      expect(assigns(:tournament_team)).to eq(nil)
      expect(response).to render_template(file: "#{Rails.root}/public/404.html")
      expect(response.status).to eq 404
    end
  end

  describe "GET #new" do
    it "assigns a new tournament_team as @tournament_team" do
      tournament = FactoryGirl.create(:tournament_basis)
      get :new, params: {tournament_id: tournament.to_param}, session: valid_session
      expect(assigns(:tournament_team)).to be_a_new(Tournament::Team)
    end
  end

  describe "GET #edit" do
    it "assigns the requested tournament_team as @tournament_team" do
      team = Tournament::Team.create! valid_attributes
      get :edit, params: {tournament_id: tournament.to_param, team_id: team.team.to_param}, session: valid_session
      expect(assigns(:tournament_team)).to eq(team)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Tournament::Team" do
        expect {
          post :create, params: {tournament_id: tournament.to_param, tournament_team: valid_attributes}, session: valid_session
        }.to change(Tournament::Team, :count).by(1)
      end

      it "assigns a newly created tournament_team as @tournament_team" do
        post :create, params: {tournament_id: tournament.to_param, tournament_team: valid_attributes}, session: valid_session
        expect(assigns(:tournament_team)).to be_a(Tournament::Team)
        expect(assigns(:tournament_team)).to be_persisted
      end

      it "redirects to the created tournament_team" do
        post :create, params: {tournament_id: tournament.to_param, tournament_team: valid_attributes}, session: valid_session
        expect(response).to redirect_to(tournament_team_path(team_id: Tournament::Team.last.team.to_param))
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved tournament_team as @tournament_team" do
        post :create, params: {tournament_id: tournament.to_param, tournament_team: invalid_attributes}, session: valid_session
        expect(assigns(:tournament_team)).to be_a_new(Tournament::Team)
      end

      it "re-renders the 'new' template" do
        post :create, params: {tournament_id: tournament.to_param, tournament_team: invalid_attributes}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        FactoryGirl.attributes_for(:tournament_team)
      }

      it "updates the requested tournament_team" do
        team = Tournament::Team.create! valid_attributes
        # set team id to just update team name
        new_attributes[:team_attributes][:id] = team.team.to_param
        put :update, params: {tournament_id: tournament.to_param, team_id: team.team.to_param, tournament_team: new_attributes}, session: valid_session
        team.reload
        expect(team.team.name).to eq new_attributes[:team_attributes][:name]
      end

      it "assigns the requested tournament_team as @tournament_team" do
        team = Tournament::Team.create! valid_attributes
        put :update, params: {tournament_id: tournament.to_param, team_id: team.team.to_param, tournament_team: valid_attributes}, session: valid_session
        expect(assigns(:tournament_team)).to eq(team)
      end

      it "redirects to the tournament_team" do
        team = Tournament::Team.create! valid_attributes
        # use the id of same team, to not create a new one
        valid_attributes[:team_attributes][:id] = team.team.to_param
        put :update, params: {tournament_id: tournament.to_param, team_id: team.team.to_param, tournament_team: valid_attributes}, session: valid_session
        expect(response).to redirect_to(tournament_team_path(team_id: team.team.to_param))
      end
    end

    context "with invalid params" do
      it "assigns the tournament_team as @tournament_team" do
        team = Tournament::Team.create! valid_attributes
        put :update, params: {tournament_id: tournament.to_param, team_id: team.team.to_param, tournament_team: invalid_attributes}, session: valid_session
        expect(assigns(:tournament_team)).to eq(team)
      end

      it "re-renders the 'edit' template" do
        team = Tournament::Team.create! valid_attributes
        invalid_attributes[:team_attributes][:id] = team.team.to_param
        put :update, params: {tournament_id: tournament.to_param, team_id: team.team.to_param, tournament_team: invalid_attributes}, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested tournament_team" do
      team = Tournament::Team.create! valid_attributes
      expect {
        delete :destroy, params: {tournament_id: tournament.to_param, team_id: team.team.to_param}, session: valid_session
      }.to change(Tournament::Team, :count).by(-1).and \
        change(Player::Base, :count).by(0).and \
        change(Team::Base, :count).by(0)
    end

    it "redirects to the tournament_teams list" do
      team = Tournament::Team.create! valid_attributes
      delete :destroy, params: {tournament_id: tournament.to_param, team_id: team.team.to_param}, session: valid_session
      expect(response).to redirect_to(tournament_teams_url)
    end
  end

end
